def appName="microprofile"
      def project=""
      
     
      node {
        stage("Initialize") {
          project = env.PROJECT_NAME
        }
      }
      
     podTemplate(label: "mypod", 
             cloud: "openshift", 
             inheritFrom: "maven",
             containers: [
                containerTemplate(name: "jnlp", 
                       image: "docker-registry.default.svc:5000/ci/jenkins-slave", 
                       resourceRequestMemory: "512Mi", 
                       resourceLimitMemory: "512Mi", 
                       envVars: [
                envVar(key: "CONTAINER_HEAP_PERCENT", value: "0.25"),

                ])
]){

  node("mypod") {
        stage("Checkout") {
		   
           sh''' update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-11.0.2/bin/java 20000 --family java-1.11-openjdk.x86_64 && \
                update-alternatives --set java /usr/lib/jvm/jdk-11.0.2/bin/java '''
          git url: "https://github.com/AmolMandloi/repo.git", branch: "master"
          sh ''' ls
          cd ./demo
                pwd
                ls
                mv ./pom.xml ../pom.xml
                mv ./readme.md ../readme.md
                mv  ./src ../src
                '''
        }
        stage("Build WAR") {
          
          sh "mvn clean package"
          stash name:"war", includes:"target/demo.war"
        }
     
        stage("Build Image") {
          unstash name:"war"
	  sh '''
	         APP_NAME=${appName}
		 export APP_NAME
		 echo $APP_NAME
	  '''
          def status = sh(returnStdout: true, script: "oc start-build buildconfig.yaml --from-file=target/demo.war")
          def result = status.split("\n").find{ it.matches("^build.*started") }
          
          if(!result) {
            echo "ERROR: No started build found for ${appName}"
            currentBuild.result = 'FAILURE'
            return
          }
          
          // result can be:
          // - build "build-name" started
          // - build build.build.openshift.io/build-name started
          // - build "build.build.openshift.io/build-name" started
          // Goal is to isolate "build-name"
          def startedBuild = result.replaceAll("build [^0-9a-zA-Z]", "").replaceAll("[^0-9a-zA-Z] started", "").replaceFirst("^.*/", "")
          echo "Build ${startedBuild} has started. Now watching it ..."
          
          timeout(time: 20, unit: 'MINUTES') {
            openshift.withCluster() {
              openshift.withProject() {
                def build = openshift.selector('builds', "${startedBuild}")
                build.untilEach {
                  def object = it.object()
                  if(object.status.phase == "Failed") {
                    error("Build ${startedBuild} failed")
                  }
                  return object.status.phase == "Complete"
                }
              }
            }  
          }
        }
        stage("Deploy") {
          openshift.withCluster() {
            openshift.withProject() {
              def dc = openshift.selector('dc', "${appName}")
              dc.rollout().status()
            }
          }
        }
      }
}
}
